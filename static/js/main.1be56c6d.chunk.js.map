{"version":3,"sources":["styled.js","App.js","serviceWorker.js","index.js"],"names":["variables","black","blue","red","white","pink","mono","sans","heading","xl","l","m","s","H1","styled","h1","_templateObject","Container","div","_templateObject2","Form","form","_templateObject3","Label","label","_templateObject4","Input","input","_templateObject5","TextArea","textarea","_templateObject6","Button","button","_templateObject7","Output","_templateObject8","App","_useState","useState","_useState2","Object","slicedToArray","message","setMessage","_useState3","_useState4","twitter","setTwitter","_useState5","_useState6","hashTags","setHashtags","_useState7","_useState8","url","setUrl","_useState9","_useState10","via","setVia","_useState11","_useState12","related","setRelated","useEffect","console","log","formatCommaSeparatedList","split","join","trim","react_default","a","createElement","className","onSubmit","e","preventDefault","encodedMessage","encodeURIComponent","string","concat","formatHashTagList","constructTwitterURL","htmlFor","value","onChange","target","type","required","name","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1be56c6d.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst variables = {\n  colours: {\n    black: \"#181f1c\",\n    blue: \"#96bbbb\",\n    red: \"#f64740\",\n    white: \"#fafafa\",\n    pink: \"#f7baa1\",\n  },\n  fonts: {\n    mono: \"'Inconsolata', monospace\",\n    sans: \"'Ubuntu', sans-serif\",\n    heading: \"'Damion', cursive\",\n  },\n  padding: \"0.8rem\",\n  marginTop: \"1.2rem\",\n  inputFontSize: \"1.2rem\",\n  borderRadius: \"0.2rem\",\n  spacing: {\n    \"xl\": \"2.25em\",\n    \"l\": \"1.5em\",\n    \"m\": \"1em\",\n    \"s\": \"0.667em\"\n  }\n}\n\nexport const H1 = styled.h1`\n  font-family: ${variables.fonts.heading};\n  font-size: 5.063em;\n  color: white;\n  text-align: center;\n`\n\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-height: 100vh;\n  align-items: center;\n  font-family: ${variables.fonts.sans};\n  background-color: rgba(255,158,153,1);\n  background: @include filter-gradient(#ff9e99, #fb958b, horizontal);\n  background: @include background-image(linear-gradient(left bottom, rgba(255,158,153,1) 0%, rgba(251,159,164,1) 18%, rgba(247,185,161,1) 51%, rgba(247,166,131,1) 82%, rgba(251,149,139,1) 100%));\n`\n\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 85%;\n  max-width: 960px;\n  margin: 0 auto;\n  padding: ${variables.spacing.m};\n  border-radius: ${variables.borderRadius};\n\n`\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin-bottom: ${variables.spacing.l};\n  color: ${variables.colours.white};\n\n`\n\nexport const Input = styled.input`\n  border-radius: ${variables.borderRadius};\n  border: none;\n  padding: ${variables.spacing.s};\n  margin-top: ${variables.spacing.s};\n  font-size: ${variables.inputFontSize};\n  font-family: ${variables.fonts.mono};\n`\n\nexport const TextArea = styled.textarea`\n  padding: ${variables.spacing.s};\n  margin-top: ${variables.spacing.s};\n  border-radius: ${variables.borderRadius};\n  resize: none;\n  font-size: ${variables.inputFontSize};\n`\n\nexport const Button = styled.button`\n  display: inline-block;\n  border-radius: ${variables.borderRadius};\n  padding: ${variables.spacing.m} 0;\n  margin: 0.5rem 1rem;\n  width: 11rem;\n  background: transparent;\n  color: white;\n  border: 2px solid white;\n  cursor: pointer;\n\n  &:hover {\n    background: white;\n    color: ${variables.colours.pink};\n    transition: 0.4s;\n  }\n\n`\n\nexport const Output = styled.div`\n  padding: ${variables.spacing.s};\n  border-radius: 0.4rem;\n  background: ${variables.colours.white};\n`","import React, { useEffect, useState } from \"react\";\nimport { Container, Form, Label, Input, TextArea, Output, H1, Button } from \"./styled\";\nimport \"./App.css\"\n\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n  const [twitter, setTwitter] = useState(\"\");\n  const [hashTags, setHashtags] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [via, setVia] = useState(\"\");\n  const [related, setRelated] = useState(\"\");\n\n  useEffect(() => {\n    console.log({ message, twitter, hashTags });\n  });\n\n  const formatCommaSeparatedList = input => {\n    return input\n      .split(\" \")\n      .join(\"\")\n      .trim();\n  };\n\n  const constructTwitterURL = () => {\n    const encodedMessage = encodeURIComponent(message);\n\n    let string = `http://twitter.com/intent/tweet?text=${encodedMessage}`;\n\n    const formatHashTagList = hashTags\n      .split(\" \")\n      .join(\"\")\n      .trim();\n    console.log(formatHashTagList);\n\n    if (hashTags) {\n      string += `&hashtags=${formatCommaSeparatedList(hashTags)}`\n    }\n\n    if (url) {\n      string += `&url=${encodeURIComponent(url)}`\n    }\n\n    if (via) {\n      string += `&url=${encodeURIComponent(url)}`\n    }\n\n    if (related) {\n      string += `&related=${formatCommaSeparatedList(related)}`\n    }\n    setTwitter(string);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    constructTwitterURL();\n  };\n\n  return (\n    <Container className=\"App\">\n      <Form className=\"form\" onSubmit={handleSubmit}>\n        <H1>Social URL Formatter</H1>\n        <Label htmlFor=\"text\">\n          <strong>Text:</strong>\n          <TextArea\n            value={message}\n            onChange={e => setMessage(e.target.value)}\n            type=\"text\"\n            required\n          />\n        </Label>\n        <Label htmlFor=\"hashTags\">\n          <strong>HashTags:</strong>\n          <Input name=\"hashTags\" onChange={e => setHashtags(e.target.value)} />\n        </Label>\n        <Label htmlFor=\"url\">\n          <strong>URL:</strong>\n          <Input name=\"url\" onChange={e => setUrl(e.target.value)} />\n        </Label>\n        <Label htmlFor=\"via\">\n          <strong>Via:</strong>\n          <Input name=\"via\" onChange={e => setVia(e.target.value)} />\n        </Label>\n        <Label htmlFor=\"related\">\n          <strong>Related:</strong>\n          <Input name=\"related\" onChange={e => setRelated(e.target.value)} />\n        </Label>\n        <Button type=\"submit\">Format</Button>\n      </Form>\n\n      {twitter && (\n        <Output>\n          <p>\n            <strong>Twitter:</strong> {twitter}\n          </p>\n        </Output>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}